#!/usr/bin/expect  -- 
####################################
# 2013-09-29 by albert
####################################


#
# exit code:
#
# 0,ok
# 1,help
# 2,error
# 3,password error
# 4,no such file
# 

proc Usage_Exit {myself} {
	puts ""
	puts "### USAGE:  $myself ip user passwd port sourcefile destdir direction"
	puts ""
	puts "            ip"
	puts "            user"
	puts "            passwd"
	puts "            port"
	puts "            sourcefile: a file or directory to be transferred"
	puts "            destdir:    the location that the sourcefile to be put into"
	puts "            direction:  pull or push."
	puts "                        pull: remote -> local"
	puts "                        push: local -> remote"
	puts ""
	exit 1
}

if { [llength $argv] !=7  } {
	Usage_Exit $argv0
}

#300s timeout, for except global
set timeout 300


#set ip "$env(ABSIP)"
#set user "$env(ABSUSER)"
#set passwd "$env(ABSPASSWD)"
#set port "$env(ABSPORT)"

set ip [lindex $argv 0]
set user [lindex $argv 1]
set passwd [lindex $argv 2]
set port [lindex $argv 3]
set sourcefile [lindex $argv 4]
set destdir [lindex $argv 5]
set direction [lindex $argv 6]
set bwlimit 0


if {  [file exists "/usr/local/bin/scp2" ] == 1  } {
	set scp "/usr/local/bin/scp2"
} elseif {  [file exists "/usr/bin/scp" ] == 1  } {
	set scp "/usr/bin/scp"
} elseif {  [file exists "/usr/bin/scp.exe" ] == 1  } {
	set scp "/usr/bin/scp.exe"
} else {
	puts "no scp found !  please specify scp PATH use ENV ABS_SCP_BIN varient\n";
	exit;
}

if {  [file exists "/usr/local/bin/ssh2" ] == 1  } {
	set ssh "/usr/local/bin/ssh2"
} elseif {  [file exists "/usr/bin/ssh" ] == 1  } {
	set ssh "/usr/bin/ssh"
} elseif {  [file exists "/usr/bin/ssh.exe" ] == 1  } {
	set ssh "/usr/bin/ssh.exe"
} else {
	puts "no ssh found !  please specify ssh PATH use ENV ABS_SSH_BIN varient\n";
	exit;
}

if {  [file exists "/usr/bin/rsync" ] == 1  } {
	set rsync "/usr/bin/rsync"
} elseif {  [file exists "/usr/bin/rsyc.exe" ] == 1  } {
	set rsync "/usr/bin/rsync.exe"
} else {
	puts "no ssh found !  please specify ssh PATH use ENV ABS_RSYNC_BIN varient\n";
	exit;
}



set yesnoflag 0


for {} {1} {} {

# for is only used to retry when "Interrupted system call" occured

# scp2: -p Tells scp2 to preserve file attributes and timestamps
# scp2: -r Copy directories recursively.  Does not follow symbolic links
# scp2: -Q Do not show process indicator

# rsync: -a, --archive, archive mode, equivalent to -rlptgoD
# rsync: -r, --recursive, recurse into directories
# rsync: -t, --times, preserve times
# rsync: -z, --compress, compress file data
# rsync: --progress show progress during transfer


if { $direction == "pull" } {

	if { $bwlimit > 0 } {
		puts "$rsync -artz --bwlimit=$bwlimit -e \"$ssh -l$user -p$port\" $ip:$sourcefile $destdir"	
		spawn $rsync -artz --bwlimit=$bwlimit -e "$ssh -l$user -p$port" $ip:$sourcefile $destdir
		
	} elseif { $bwlimit == 0 } {
		spawn $scp  -P $port -r -p  $user@$ip:$sourcefile $destdir
	} else {
		Usage_Exit $argv0
	}

} elseif { $direction == "push" } {

	if { $bwlimit > 0 } {
		spawn $rsync -artz --bwlimit=$bwlimit -e "$ssh  -l$user -p$port" $sourcefile $ip:$destdir
	} elseif { $bwlimit == 0 } {
		spawn $scp  -P $port -r -p  $sourcefile $user@$ip:$destdir
	} else {
		Usage_Exit $argv0
	}

} else {
	Usage_Exit $argv0
}

expect 	{

	"assword:" {
		send "$passwd\r" 
		break;
	}
	
	"yes/no)?" {
		set yesnoflag 1
		send "yes\r"
		break;
	}
	
	"FATAL" {
		puts "\nCONNECTERROR: $ip occur FATAL ERROR!!!\n"
		exit 2
	}
	
	timeout {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}
	
	"No route to host" {
		puts "\nCONNECTERROR: $ip No route to host!!!\n"
		exit 2
	}
	
	"Connection Refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Connection refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Host key verification failed" {
		puts "\nCONNECTERROR: $ip Host key verification failed!!!\n"
		exit 2
	}
	
	"Illegal host key" {
		puts "\nCONNECTERROR: $ip Illegal host key!!!\n"
		exit 2
	}
		
	"Connection Timed Out" {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}

	"Interrupted system call" {
		puts "\n$ip Interrupted system call!!!\n"
	}

	"Disconnected; connection lost" {
		puts "\n$ip connection lost!!!\n"
		exit 2
	}

	"Authentication failed" {
		puts "\n$ip Authentication failed!!!\n"
		exit 2
	}

	"Destination Unreachable" {
		puts "\n$ip Destination Unreachable!!!\n"
		exit 2
	}

	"no such file" {
		puts "\nSRCFILEERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}
	
	"Killed by signal 1" {
		puts "\nSRCFILEERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}
	
	"such file or directory" {
		puts "\nSRCFILEERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}
	
	#don't need password
	eof {   
		exit 0
		break
	}

}

}

if { $yesnoflag == 1 } {
	expect {
	
		"assword:" {
			send "$passwd\r"
		}

		"yes/no)?" {
			set yesnoflag 2
			send "yes\r"
		}
	}
}

if { $yesnoflag == 2 } {
	expect {
	
		"assword:" {
			send "$passwd\r"
		}
	}
}

expect {
	
	"assword:" {
		send "$passwd\r"
		puts "\nPASSWORDERROR: $ip PASSWORD ERROR!!!\n"
		exit 3
	}
	
	"unspecified failure" {
		puts "\nDESTDIRERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}

	eof { 
		exit 0;
	}
}
